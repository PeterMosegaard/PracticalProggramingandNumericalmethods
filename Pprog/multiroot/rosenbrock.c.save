#include<stdlib.h>
#include<stdio.h>
#include<gsl/gsl_vector.h>
#include<gsl/gsl_multiroots.h>

int rosenbrock_f(const gsl_vector*x, void*params, gsl_vector*f)
{
	double z=*(double*)params;
	double r=gsl_vector_get(x,0);
	double mismatch=-2*(1-x)+200*(;

	gsl_vector_set(f,0,mismatch);


return GSL_SUCCESS;
}

double root(double z){
	gsl_multiroot_function F;
	F.f=rosenbrock_f;
	F.n=1;
	F.params=(void*)&z;

	gsl_multiroot_fsolver * S;
	S = gsl_multiroot_fsolver_alloc(TYPE,F.n);

	gsl_vector* start = gsl_vector_alloc(F.n);
	gsl_vector_set(start,0,z/2);
	gsl_multiroot_fsolver_set(S,&F,start);

	int flag,iter=0;
	do{
		iter++;
		gsl_multiroot_fsolver_iterate(S);
		flag=gsl_multiroot_test_residual(S->f,EPS);
	}while(flag==GSL_CONTINUE);
	printf("z=%g iter=%i\n",z,iter);

	double result=gsl_vector_get(S->x,0);
	gsl_multiroot_fsolver_free(S);
	gsl_vector_free(start);
	return result;
}
